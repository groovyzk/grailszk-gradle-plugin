buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'

repositories {
    mavenCentral()
}

version project.projectVersion
group "io.github.zkgroovy"

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    it."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
    it."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
    it."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSWORD')
}

dependencies {
    // Use the awesome Spock testing and specification framework
//    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

gradlePlugin {
    plugins {
        grailszkPlugin {
            id = 'io.github.zkgroovy.grailszk-gradle-plugin'
            displayName = 'Grailszk'
            description = 'Gradle plugin for configuring Grailszk asset and compilation structure.'
            implementationClass = 'io.github.zkgroovy.GrailszkGradlePlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            pom {
                name = project.name.replace('-', ' ').capitalize()
                description = 'Gradle plugin for configuring Grailszk asset and compilation structure.'
                url = 'https://github.com/groovyzk/grailszk-gradle-plugin#readme'
                licenses {
                    license {
                        name = 'LGPL 3.0'
                        url = 'https://github.com/groovyzk/grailszk-gradle-plugin/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'maiconandsilva'
                        name = 'Maicon Mauricio'
                        email = 'maicon.dev@pm.me'
                    }
                }
                scm {
                    url = 'https://github.com/groovyzk/grailszk-gradle-plugin/tree/main'
                    connection = 'scm:git:git://github.com/groovyzk/grailszk-gradle-plugin.git'
                    developerConnection = 'scm:git:ssh://github.com:groovyzk/grailszk-gradle-plugin.git'
                }
            }
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.pluginMaven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}
